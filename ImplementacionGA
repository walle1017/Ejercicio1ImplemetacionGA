package solucionga;
import javax.swing.JOptionPane;
import java.util.*;
import java.util.Random;
import java.util.Arrays.*;
import java.util.Comparator;
import java.util.Collections;
/**
 *
 * @author yuritzi_Wall-e
 */
public class ImplemntacionGA {
    public static Vector GenerarPoblacion(Vector poblacion){
        double almace = funcion(0);
        for(int i = 0;i<=4;i++){
            double cont = Math.random()*almace;
            poblacion.add(cont);
        }
        return poblacion;
        
        
    }
    

    
    public static double evaluacionPoblacion(Vector poblacion){
        Vector v = GenerarPoblacion(poblacion);
        Object aux = 0;
        Double vec1[] = new Double[20];
        Collections.sort(v);
        //System.out.println(vector.elementAt(100)); es el mayor
        aux = v.elementAt(100);
        double may = (double) aux;
        return may;
    }
    
    
    public static double mutationCross(Vector poblacion){
        Vector vec = GenerarPoblacion(poblacion);
        Collections.sort(vec);
        
        Object aux = vec.elementAt(20);
        double may = (double) aux;
        double mutacion = may*.10;
        double cruzamiento = mutacion+may;
        return cruzamiento;
    }
    
    
    public static double fitness(Vector poblacion,double cruzamiento){
        Vector r = GenerarPoblacion(poblacion);
        double suma = 0;
        Object aux=0;
        
       for(int i = 0; i < r.size(); i++){
           aux= r.get(i);
           double a=(double)aux;
           suma+=a+cruzamiento;
       }
       
       return suma;
    }
    
    
    
    
    public static double funcion(double sum1){
        double x = (sustitucion(0)+sum1);
        
        return x;
    }
   

    public static int despeje(int p){
        return 4;
    }
    public static int sustitucion(int p){
        int plo = despeje(p);
        
        return 10*plo-20;
    }
    
   
    
    
    
        public static Vector poblaciones(Vector poblacion){
        for(int i = 0;i<=20;i++){
            double cont = Math.random();
            poblacion.add(cont);
        }
        return poblacion;
    }
    
       public static double evaluacion_Poblacion(Vector poblacion){
        Vector vector = poblaciones(poblacion);
        Object au = 0;
        Double vec[] = new Double[20];
        Collections.sort(vector);
        
        au = vector.elementAt(20);
        double m = (double) au;
        return m;
    }
    
    public static double combinacion(Vector poblacion){
        Vector vector = poblaciones(poblacion);
        Collections.sort(vector);
         
        Object au = vector.elementAt(20);
        double m = (double) au;
        double mut = m*.02;
        double cruz = mut+m;
        return cruz;
    }
    
    public static double Individuo_fitness(Vector poblacion,double cruz){
        Vector vector = poblaciones(poblacion);
        double sum = 0;
        Object au=0;
        
       for(int i = 0; i < vector.size(); i++){
           au= vector.get(i);
           double a=(double)au;
           sum+=a;
       }
       System.out.println(sum);
       return sum;
    }

   
    public static void main(String[] args) {
        Vector poblacion = new Vector(10);
        
       
       System.out.println(funcion(fitness(poblacion,0)));
       System.out.println(sustitucion(0));
       
       
       
    }
    
}
